import 'package:flutter/material.dart';
import 'package:flutter_hotelbooking_25/db/database_helper.dart';
import 'package:intl/intl.dart';
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server.dart';

class XetDuyetMoiScreen extends StatefulWidget {
  const XetDuyetMoiScreen({super.key});

  @override
  State<XetDuyetMoiScreen> createState() => _XetDuyetMoiScreenState();
}

class _XetDuyetMoiScreenState extends State<XetDuyetMoiScreen> {
  List<Map<String, dynamic>> _bookings = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadBookings();
  }

  Future<void> _loadBookings() async {
    setState(() => _isLoading = true);
    try {
      final dbHelper = DatabaseHelper.instance;
      _bookings = await dbHelper.getPaidBookings();
      print('S·ªë l∆∞·ª£ng b·∫£n ghi bookings: ${_bookings.length}');
      print('D·ªØ li·ªáu bookings: $_bookings');
      setState(() => _isLoading = false);
    } catch (e) {
      print('Error khi t·∫£i bookings: $e');
      setState(() => _isLoading = false);
    }
  }

  Future<void> _acceptBooking(int idDatPhong, String email) async {
    try {
      await DatabaseHelper.instance.updateBookingStatus(
        idDatPhong,
        'confirmed',
        null,
      );
      await _sendConfirmationEmail(email, idDatPhong);
      await _loadBookings();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Row(
            children: [
              Icon(Icons.check_circle, color: Colors.white),
              SizedBox(width: 8),
              Text('ƒê√£ x√°c nh·∫≠n ƒë·∫∑t ph√≤ng v√† g·ª≠i email th√†nh c√¥ng'),
            ],
          ),
          backgroundColor: Colors.green,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      );
    } catch (e) {
      print('Error khi ch·∫•p nh·∫≠n booking: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.error, color: Colors.white),
              const SizedBox(width: 8),
              Expanded(child: Text('L·ªói khi x√°c nh·∫≠n: $e')),
            ],
          ),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      );
    }
  }

  Future<void> _rejectBooking(int idDatPhong, int idPhong, String email) async {
    try {
      await DatabaseHelper.instance.updateBookingStatus(
        idDatPhong,
        'rejected',
        null,
      );
      await DatabaseHelper.instance.updateRoomStatus(
        idPhong,
        1,
      ); // Tr·∫£ ph√≤ng v·ªÅ tr·∫°ng th√°i tr·ªëng
      await _sendRejectionEmail(email, idDatPhong);
      // Th√™m logic ho√†n ti·ªÅn n·∫øu c·∫ßn (v√≠ d·ª•: th√¥ng b√°o ho·∫∑c API g·ªçi)
      await _loadBookings();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Row(
            children: [
              Icon(Icons.cancel, color: Colors.white),
              SizedBox(width: 8),
              Text('ƒê√£ h·ªßy ƒë·∫∑t ph√≤ng v√† tr·∫£ ph√≤ng th√†nh c√¥ng'),
            ],
          ),
          backgroundColor: Colors.orange,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      );
    } catch (e) {
      print('Error khi t·ª´ ch·ªëi booking: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.error, color: Colors.white),
              const SizedBox(width: 8),
              Expanded(child: Text('L·ªói khi h·ªßy: $e')),
            ],
          ),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      );
    }
  }

  Future<void> _sendConfirmationEmail(String email, int idDatPhong) async {
    try {
      final smtpServer = SmtpServer(
        'smtp.gmail.com',
        port: 587,
        username: 'nguyenhoang26042004@gmail.com', // Thay b·∫±ng email c·ªßa b·∫°n
        password: 'ioqr uhpq jgmu luok ', // Thay b·∫±ng App Password 16 k√Ω t·ª±
        ssl: false,
        allowInsecure: false,
      );
      final message =
          Message()
            ..from = Address(
              'booking@hotelmanagement.com', // Email chuy√™n nghi·ªáp h∆°n
              'Kh√°ch s·∫°n JW MARRIOT - B·ªô ph·∫≠n ƒê·∫∑t ph√≤ng',
            )
            ..recipients.add(email)
            ..subject =
                'X√°c nh·∫≠n ƒë·∫∑t ph√≤ng th√†nh c√¥ng - M√£ ƒë·∫∑t ph√≤ng #$idDatPhong'
            ..html = '''
    <html>
      <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
          <h1 style="color: white; margin: 0; font-size: 28px;">X√°c nh·∫≠n ƒë·∫∑t ph√≤ng</h1>
          <p style="color: white; margin: 10px 0 0 0; font-size: 16px;">C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng l·ª±a ch·ªçn d·ªãch v·ª• c·ªßa ch√∫ng t√¥i</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #e9ecef;">
          <h2 style="color: #2c3e50; margin-top: 0;">K√≠nh ch√†o qu√Ω kh√°ch,</h2>
          
          <p style="font-size: 16px; margin-bottom: 20px;">
            Ch√∫ng t√¥i vui m·ª´ng th√¥ng b√°o r·∫±ng ƒë·∫∑t ph√≤ng c·ªßa qu√Ω kh√°ch ƒë√£ ƒë∆∞·ª£c <strong>x√°c nh·∫≠n th√†nh c√¥ng</strong> v√† thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.
          </p>
          
          <div style="background: white; padding: 25px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin: 25px 0;">
            <h3 style="color: #667eea; margin-top: 0; border-bottom: 2px solid #667eea; padding-bottom: 10px;">
              üìã Th√¥ng tin ƒë·∫∑t ph√≤ng
            </h3>
            
            <div style="display: grid; gap: 15px;">
              <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
                <span style="font-weight: bold; color: #555;">M√£ ƒë·∫∑t ph√≤ng:</span>
                <span style="color: #667eea; font-weight: bold; font-size: 18px;">#$idDatPhong</span>
              </div>
              
              <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
                <span style="font-weight: bold; color: #555;">üìÖ Ng√†y nh·∫≠n ph√≤ng:</span>
                <span>${DateFormat('dd/MM/yyyy - HH:mm').format(DateTime.now())}</span>
              </div>
              
              <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
                <span style="font-weight: bold; color: #555;">üìÖ Ng√†y tr·∫£ ph√≤ng:</span>
                <span>${DateFormat('dd/MM/yyyy - HH:mm').format(DateTime.now().add(const Duration(days: 1)))}</span>
              </div>
              
              <div style="display: flex; justify-content: space-between; padding: 10px 0;">
                <span style="font-weight: bold; color: #555;">‚úÖ Tr·∫°ng th√°i:</span>
                <span style="background: #28a745; color: white; padding: 5px 15px; border-radius: 20px; font-size: 14px;">ƒê√£ x√°c nh·∫≠n</span>
              </div>
            </div>
          </div>
          
          <div style="background: #e8f4f8; padding: 20px; border-radius: 8px; border-left: 4px solid #17a2b8; margin: 25px 0;">
            <h4 style="color: #17a2b8; margin-top: 0;">üì¢ L∆∞u √Ω quan tr·ªçng:</h4>
            <ul style="margin: 10px 0; padding-left: 20px;">
              <li>Vui l√≤ng mang theo gi·∫•y t·ªù t√πy th√¢n khi nh·∫≠n ph√≤ng</li>
              <li>Th·ªùi gian nh·∫≠n ph√≤ng: 14:00 - 22:00</li>
              <li>Th·ªùi gian tr·∫£ ph√≤ng: 06:00 - 12:00</li>
              <li>Li√™n h·ªá l·ªÖ t√¢n: <strong>1900-1099</strong> n·∫øu c·∫ßn h·ªó tr·ª£</li>
            </ul>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <p style="font-size: 16px; color: #666; margin-bottom: 20px;">
              C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ l·ª±a ch·ªçn d·ªãch v·ª• c·ªßa ch√∫ng t√¥i. Ch√∫ng t√¥i mong ƒë∆∞·ª£c ph·ª•c v·ª• qu√Ω kh√°ch!
            </p>
            
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <p style="margin: 0; font-weight: bold;">Ch√∫c qu√Ω kh√°ch c√≥ m·ªôt k·ª≥ ngh·ªâ tuy·ªát v·ªùi! üåü</p>
            </div>
          </div>
          
          <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
          
          <div style="text-align: center; color: #666; font-size: 14px;">
            <p style="margin: 5px 0;"><strong> H·ªá Th·ªëng Kh√°ch s·∫°n JW MARRIOT</strong></p>
            <p style="margin: 5px 0;">üìç Corner Hai Ba Trung St & Le Duan Blvd Ben Nghe Ward, Qu·∫≠n 1, H·ªì Ch√≠ Minh,</p>
            <p style="margin: 5px 0;">üìç No 8 Do Duc Duc Road ME Tri, Nam T·ª´ Li√™m, H√† N·ªôi </p>
            <p style="margin: 5px 0;">üìç Khem Beach, An Th·ªõi, Ph√∫ Qu·ªëc, Ki√™n Giang </p>
            <p style="margin: 5px 0;">üìû Hotline: 1900-1099 | üìß Email: booking@hotelmanagement.com</p>
            <p style="margin: 15px 0 5px 0; font-size: 12px; color: #999;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi tr·ª±c ti·∫øp.
            </p>
          </div>
        </div>
      </body>
    </html>
  '''
            ..text = '''
K√≠nh ch√†o qu√Ω kh√°ch,

Ch√∫ng t√¥i vui m·ª´ng th√¥ng b√°o r·∫±ng ƒë·∫∑t ph√≤ng c·ªßa qu√Ω kh√°ch ƒë√£ ƒë∆∞·ª£c X√ÅC NH·∫¨N TH√ÄNH C√îNG v√† thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.

TH√îNG TIN ƒê·∫∂T PH√íNG:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ M√£ ƒë·∫∑t ph√≤ng: #$idDatPhong
‚Ä¢ Ng√†y nh·∫≠n ph√≤ng: ${DateFormat('dd/MM/yyyy - HH:mm').format(DateTime.now())}
‚Ä¢ Ng√†y tr·∫£ ph√≤ng: ${DateFormat('dd/MM/yyyy - HH:mm').format(DateTime.now().add(const Duration(days: 1)))}
‚Ä¢ Tr·∫°ng th√°i: ‚úÖ ƒê√£ x√°c nh·∫≠n
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

L∆ØU √ù QUAN TR·ªåNG:
‚Ä¢ Vui l√≤ng mang theo gi·∫•y t·ªù t√πy th√¢n khi nh·∫≠n ph√≤ng
‚Ä¢ Th·ªùi gian nh·∫≠n ph√≤ng: 14:00 - 22:00
‚Ä¢ Th·ªùi gian tr·∫£ ph√≤ng: 06:00 - 12:00
‚Ä¢ Li√™n h·ªá l·ªÖ t√¢n: 1900-xxxx n·∫øu c·∫ßn h·ªó tr·ª£

C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ l·ª±a ch·ªçn d·ªãch v·ª• c·ªßa ch√∫ng t√¥i. Ch√∫ng t√¥i mong ƒë∆∞·ª£c ph·ª•c v·ª• qu√Ω kh√°ch!

Ch√∫c qu√Ω kh√°ch c√≥ m·ªôt k·ª≥ ngh·ªâ tuy·ªát v·ªùi! üåü

Tr√¢n tr·ªçng,
Kh√°ch s·∫°n ABC - B·ªô ph·∫≠n ƒê·∫∑t ph√≤ng
üìç 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM
üìû Hotline: 1900-xxxx
üìß Email: booking@hotelmanagement.com

---
Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi tr·ª±c ti·∫øp.
  ''';
      final sendReport = await send(message, smtpServer);
      print('Email g·ª≠i th√†nh c√¥ng ƒë·∫øn $email: $sendReport');
    } catch (e) {
      print('L·ªói khi g·ª≠i email: $e');
    }
  }

  Future<void> _sendRejectionEmail(String email, int idDatPhong) async {
    try {
      final smtpServer = SmtpServer(
        'smtp.gmail.com',
        port: 587,
        username: 'nguyenhoang26042004@gmail.com', // Email c·ªßa b·∫°n
        password: 'ioqr uhpq jgmu luok ', // App password
        ssl: false,
        allowInsecure: false,
      );
      final message =
          Message()
            ..from = Address(
              'nguyenhoang26042004@gmail.com',
              'Hotel Booking Admin',
            )
            ..recipients.add(email)
            ..subject = 'Th√¥ng b√°o h·ªßy ƒë·∫∑t ph√≤ng - M√£ ƒë·∫∑t ph√≤ng #$idDatPhong'
            ..text =
                'Ch√†o b·∫°n,\n\n'
                'ƒê·∫∑t ph√≤ng c·ªßa b·∫°n v·ªõi m√£ #$idDatPhong ƒë√£ b·ªã h·ªßy. '
                'N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc ho·∫∑c c·∫ßn h·ªó tr·ª£ th√™m, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.\n\n'
                'Tr√¢n tr·ªçng,\nƒê·ªôi ng≈© Hotel Booking';

      final sendReport = await send(message, smtpServer);
      print('Email t·ª´ ch·ªëi g·ª≠i th√†nh c√¥ng ƒë·∫øn $email: $sendReport');
    } catch (e) {
      print('L·ªói khi g·ª≠i email t·ª´ ch·ªëi: $e');
    }
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case 'confirmed':
        return Colors.green;
      case 'rejected':
        return Colors.red;
      case 'paid':
        return Colors.blue;
      default:
        return Colors.grey;
    }
  }

  String _getStatusText(String status) {
    switch (status) {
      case 'confirmed':
        return 'ƒê√£ x√°c nh·∫≠n';
      case 'rejected':
        return 'ƒê√£ t·ª´ ch·ªëi';
      case 'paid':
        return 'ƒê√£ thanh to√°n';
      default:
        return status;
    }
  }

  IconData _getStatusIcon(String status) {
    switch (status) {
      case 'confirmed':
        return Icons.check_circle;
      case 'rejected':
        return Icons.cancel;
      case 'paid':
        return Icons.payment;
      default:
        return Icons.info;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: const Text(
          'X√©t Duy·ªát ƒê·∫∑t Ph√≤ng',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
        ),
        backgroundColor: Colors.blue[700],
        elevation: 0,
        // actions: [
        //   IconButton(
        //     icon: const Icon(Icons.refresh, color: Colors.white),
        //     onPressed: _loadBookings,
        //   ),
        // ],
      ),
      body:
          _isLoading
              ? const Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),
                    ),
                    SizedBox(height: 16),
                    Text(
                      'ƒêang t·∫£i d·ªØ li·ªáu...',
                      style: TextStyle(fontSize: 16, color: Colors.grey),
                    ),
                  ],
                ),
              )
              : _bookings.isEmpty
              ? Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.inbox, size: 80, color: Colors.grey[400]),
                    const SizedBox(height: 16),
                    Text(
                      'Kh√¥ng c√≥ ƒë·∫∑t ph√≤ng n√†o c·∫ßn x√©t duy·ªát',
                      style: TextStyle(
                        fontSize: 18,
                        color: Colors.grey[600],
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'K√©o xu·ªëng ƒë·ªÉ l√†m m·ªõi',
                      style: TextStyle(fontSize: 14, color: Colors.grey[500]),
                    ),
                  ],
                ),
              )
              : RefreshIndicator(
                onRefresh: _loadBookings,
                child: ListView.builder(
                  padding: const EdgeInsets.all(16),
                  itemCount: _bookings.length,
                  itemBuilder: (context, index) {
                    final booking = _bookings[index];
                    final formatter = DateFormat('dd/MM/yyyy');
                    final ngayNhanPhong = formatter.format(
                      DateTime.parse(booking['NgayNhanPhong'] as String),
                    );
                    final ngayTraPhong = formatter.format(
                      DateTime.parse(booking['NgayTraPhong'] as String),
                    );
                    final status = booking['TrangThai'] as String;
                    final isApproved =
                        status == 'confirmed' || status == 'rejected';

                    print('Booking at index $index: ${_bookings[index]}');

                    return Container(
                      margin: const EdgeInsets.only(bottom: 16),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.grey.withOpacity(0.1),
                            spreadRadius: 1,
                            blurRadius: 8,
                            offset: const Offset(0, 2),
                          ),
                        ],
                        border:
                            isApproved
                                ? Border.all(
                                  color: _getStatusColor(
                                    status,
                                  ).withOpacity(0.3),
                                  width: 2,
                                )
                                : null,
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Header
                          Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Colors.blue[50],
                              borderRadius: const BorderRadius.only(
                                topLeft: Radius.circular(12),
                                topRight: Radius.circular(12),
                              ),
                            ),
                            child: Row(
                              children: [
                                Container(
                                  padding: const EdgeInsets.all(8),
                                  decoration: BoxDecoration(
                                    color: Colors.blue[100],
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: Icon(
                                    Icons.hotel,
                                    color: Colors.blue[700],
                                    size: 20,
                                  ),
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        'ƒê·∫∑t ph√≤ng #${booking['IDDatPhong']}',
                                        style: const TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold,
                                          color: Colors.black87,
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Row(
                                        children: [
                                          Icon(
                                            _getStatusIcon(status),
                                            size: 16,
                                            color: _getStatusColor(status),
                                          ),
                                          const SizedBox(width: 4),
                                          Text(
                                            _getStatusText(status),
                                            style: TextStyle(
                                              fontSize: 14,
                                              color: _getStatusColor(status),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),

                          // Content
                          Padding(
                            padding: const EdgeInsets.all(16),
                            child: Column(
                              children: [
                                // Customer Info
                                _buildInfoRow(
                                  icon: Icons.person,
                                  title: 'Kh√°ch h√†ng',
                                  value: booking['HoTen'] ?? 'N/A',
                                ),
                                const SizedBox(height: 12),
                                _buildInfoRow(
                                  icon: Icons.email,
                                  title: 'Email',
                                  value: booking['Email'] ?? 'N/A',
                                ),
                                const SizedBox(height: 12),
                                _buildInfoRow(
                                  icon: Icons.phone,
                                  title: 'S·ªë ƒëi·ªán tho·∫°i',
                                  value: booking['SoDienThoai'] ?? 'N/A',
                                ),

                                const Divider(height: 32),

                                // Room Info
                                _buildInfoRow(
                                  icon: Icons.room_service,
                                  title: 'Lo·∫°i ph√≤ng',
                                  value: booking['TenLoaiPhong'] ?? 'N/A',
                                ),
                                const SizedBox(height: 12),
                                _buildInfoRow(
                                  icon: Icons.door_front_door,
                                  title: 'S·ªë ph√≤ng',
                                  value:
                                      booking['SoPhong']?.toString() ?? 'N/A',
                                ),

                                const Divider(height: 32),

                                // Booking Details
                                Row(
                                  children: [
                                    Expanded(
                                      child: _buildDateCard(
                                        'Ng√†y nh·∫≠n',
                                        ngayNhanPhong,
                                        Icons.login,
                                        Colors.green,
                                      ),
                                    ),
                                    const SizedBox(width: 12),
                                    Expanded(
                                      child: _buildDateCard(
                                        'Ng√†y tr·∫£',
                                        ngayTraPhong,
                                        Icons.logout,
                                        Colors.orange,
                                      ),
                                    ),
                                  ],
                                ),

                                const SizedBox(height: 16),

                                // Total Amount
                                Container(
                                  width: double.infinity,
                                  padding: const EdgeInsets.all(16),
                                  decoration: BoxDecoration(
                                    color: Colors.blue[50],
                                    borderRadius: BorderRadius.circular(8),
                                    border: Border.all(
                                      color: Colors.blue[200]!,
                                      width: 1,
                                    ),
                                  ),
                                  child: Row(
                                    children: [
                                      Icon(
                                        Icons.attach_money,
                                        color: Colors.blue[700],
                                        size: 24,
                                      ),
                                      const SizedBox(width: 8),
                                      Text(
                                        'T·ªïng ti·ªÅn: ',
                                        style: TextStyle(
                                          fontSize: 16,
                                          color: Colors.blue[700],
                                          fontWeight: FontWeight.w500,
                                        ),
                                      ),
                                      Text(
                                        '${(booking['TongTien'] as num).toStringAsFixed(3)} VND',
                                        style: TextStyle(
                                          fontSize: 18,
                                          color: Colors.blue[700],
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),

                          // Action Buttons
                          if (status == 'paid')
                            Container(
                              padding: const EdgeInsets.all(16),
                              decoration: BoxDecoration(
                                color: Colors.grey[50],
                                borderRadius: const BorderRadius.only(
                                  bottomLeft: Radius.circular(12),
                                  bottomRight: Radius.circular(12),
                                ),
                              ),
                              child: Row(
                                children: [
                                  Expanded(
                                    child: ElevatedButton.icon(
                                      onPressed:
                                          () => _acceptBooking(
                                            booking['IDDatPhong'],
                                            booking['Email'] as String,
                                          ),
                                      icon: const Icon(
                                        Icons.check,
                                        color: Colors.white,
                                      ),
                                      label: const Text(
                                        'Ch·∫•p nh·∫≠n',
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          color: Colors.white,
                                        ),
                                      ),
                                      style: ElevatedButton.styleFrom(
                                        backgroundColor: Colors.green,
                                        padding: const EdgeInsets.symmetric(
                                          vertical: 12,
                                        ),
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(
                                            8,
                                          ),
                                        ),
                                        elevation: 2,
                                      ),
                                    ),
                                  ),
                                  const SizedBox(width: 12),
                                  Expanded(
                                    child: ElevatedButton.icon(
                                      onPressed:
                                          () => _rejectBooking(
                                            booking['IDDatPhong'],
                                            booking['IDPhong'] as int,
                                            booking['Email'] as String,
                                          ),
                                      icon: const Icon(
                                        Icons.close,
                                        color: Colors.white,
                                      ),
                                      label: const Text(
                                        'T·ª´ ch·ªëi',
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          color: Colors.white,
                                        ),
                                      ),
                                      style: ElevatedButton.styleFrom(
                                        backgroundColor: Colors.red,
                                        padding: const EdgeInsets.symmetric(
                                          vertical: 12,
                                        ),
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(
                                            8,
                                          ),
                                        ),
                                        elevation: 2,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                        ],
                      ),
                    );
                  },
                ),
              ),
    );
  }

  Widget _buildInfoRow({
    required IconData icon,
    required String title,
    required String value,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.all(6),
          decoration: BoxDecoration(
            color: Colors.grey[100],
            borderRadius: BorderRadius.circular(6),
          ),
          child: Icon(icon, size: 16, color: Colors.grey[600]),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(height: 2),
              Text(
                value,
                style: const TextStyle(
                  fontSize: 15,
                  color: Colors.black87,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildDateCard(String title, String date, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3), width: 1),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(height: 8),
          Text(
            title,
            style: TextStyle(
              fontSize: 12,
              color: color,
              fontWeight: FontWeight.w500,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            date,
            style: TextStyle(
              fontSize: 14,
              color: color,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }
}
